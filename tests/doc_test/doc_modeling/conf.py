#
# needs test docs documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 28 11:37:14 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import sys

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
from typing import Optional

try:
    from typing import Literal
except ImportError:
    from typing_extensions import Literal

from pydantic import (
    BaseModel,
    Extra,
    Field,
    ValidationError,
    conlist,
    constr,
    validator,
)

from sphinx_modeling.modeling.defaults import NEEDS_MODELING_REMOVE_FIELDS
from sphinx_modeling.modeling.main import BaseModelNeeds

sys.path.insert(0, os.path.abspath("."))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

extensions = ["sphinx_needs", "sphinx_modeling", "sphinxcontrib.plantuml"]

needs_table_style = "TABLE"


needs_types = [
    {"directive": "story", "title": "User Story", "prefix": "US_", "color": "#BFD8D2", "style": "node"},
    {"directive": "spec", "title": "Specification", "prefix": "SP_", "color": "#FEDCD2", "style": "node"},
    {"directive": "impl", "title": "Implementation", "prefix": "IM_", "color": "#DF744A", "style": "node"},
    {"directive": "test", "title": "Test Case", "prefix": "TC_", "color": "#DCB239", "style": "node"},
]

needs_extra_options = [
    "active",
    "impact",
    "importance",
    "owner",
    "priority",
]

needs_extra_links = [
    {
        "option": "links",
        "incoming": "is linked by",
        "outgoing": "links to",
        "copy": False,
        "style": "#black",
        "style_part": "dotted,#black",
    },
    {
        "option": "blocks",
        "incoming": "is blocked by",
        "outgoing": "blocks",
        "copy": True,
        "style": "bold,#AA0000",
        "allow_dead_links": True,
    },
    {
        "option": "tests",
        "incoming": "is tested by",
        "outgoing": "tests",
        "copy": False,
        "style": "dashed,#00AA00",
        "style_part": "dotted,#00AA00",
    },
]

id_regex_common = r"^{prefix}[a-zA-Z0-9_]{{3,}}$"
id_constraints = {}
for need_type in needs_types:
    id_regex = id_regex_common.format(prefix=need_type["prefix"])
    id_constraints[need_type["directive"].title()] = constr(regex=id_regex)

# reusable field types
needs_bool = Literal["True", "False"]

# usage of qualname, see https://stackoverflow.com/a/62943181
class Story(BaseModelNeeds, extra=Extra.forbid):
    id: id_constraints[__qualname__]
    type: Literal["story"]
    active: Optional[needs_bool]

    # TODO: allow_reuse is needed due to a bug in _prepare_validator where
    #       __module__ is undefined here
    #       (which is perfectly fine as conf.py is not *used* as a module)
    @validator("id", allow_reuse=True)
    def check_id(cls, value):
        return value


class Spec(BaseModelNeeds, extra=Extra.forbid):
    id: id_constraints[__qualname__]
    type: Literal["spec"]
    importance: Literal["HIGH"]
    active: needs_bool
    links: conlist(Story, min_items=1, max_items=1)


class Impl(BaseModelNeeds, extra=Extra.forbid):
    id: id_constraints[__qualname__]
    type: Literal["impl"]
    impact: Optional[Literal["True", "False"]]


class Test(BaseModelNeeds, extra=Extra.forbid):
    id: str
    type: Literal["test"]
    impact: Optional[Literal["True", "False"]]
    parent_need: Impl


needs_modeling_pydantic_models = [
    Story,
    Spec,
    Impl,
    Test,
]
needs_modeling_remove_fields = NEEDS_MODELING_REMOVE_FIELDS + [
    "content",
    "full_title",
    "is_external",
    "is_need",
    "is_part",
    "parent_needs",
    "section_name",
    "sections",
    "tags",
    "title",
    "doctype",
]


plantuml = "java -jar %s" % os.path.join(os.path.dirname(__file__), "..", "utils", "plantuml.jar")
plantuml_output_format = "svg"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "needs test docs"
copyright = "2017, team useblocks"
author = "team useblocks"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = "1.0"
# The full version, including alpha/beta/rc tags.
release = "1.0"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "alabaster"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ["_static"]

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "needstestdocsdoc"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "needstestdocs.tex", "needs test docs Documentation", "team useblocks", "manual"),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "needstestdocs", "needs test docs Documentation", [author], 1)]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "needstestdocs",
        "needs test docs Documentation",
        author,
        "needstestdocs",
        "One line description of project.",
        "Miscellaneous",
    ),
]
